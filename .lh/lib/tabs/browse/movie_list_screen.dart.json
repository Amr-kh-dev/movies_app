{
    "sourceFile": "lib/tabs/browse/movie_list_screen.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 16,
            "patches": [
                {
                    "date": 1732827960399,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1732828001127,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,81 +34,5 @@\n         },\r\n       ),\r\n     );\r\n   }\r\n-}\r\n-class MoviesListScreen extends StatelessWidget {\r\n-  final int genreId;\r\n-  final String genreName;\r\n-\r\n-  const MoviesListScreen({super.key, required this.genreId, required this.genreName});\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    return Scaffold(\r\n-      appBar: AppBar(title: Text(genreName)),\r\n-      body: FutureBuilder<List<dynamic>>(\r\n-        future: fetchMoviesByGenre(genreId),\r\n-        builder: (context, snapshot) {\r\n-          if (snapshot.connectionState == ConnectionState.waiting) {\r\n-            return const Center(child: CircularProgressIndicator());\r\n-          } else if (snapshot.hasError) {\r\n-            return Center(child: Text('Error: ${snapshot.error}'));\r\n-          } else if (!snapshot.hasData || snapshot.data!.isEmpty) {\r\n-            return const Center(child: Text('No movies available'));\r\n-          }\r\n-\r\n-          final movies = snapshot.data!;\r\n-          return ListView.builder(\r\n-            itemCount: movies.length,\r\n-            itemBuilder: (context, index) {\r\n-              final movie = movies[index];\r\n-              return ListTile(\r\n-                title: Text(movie['title']),\r\n-                subtitle: Text(movie['release_date'] ?? 'Unknown'),\r\n-                leading: Image.network('https://image.tmdb.org/t/p/w200${movie['poster_path']}'),\r\n-              );\r\n-            },\r\n-          );\r\n-        },\r\n-      ),\r\n-    );\r\n-  }\r\n-}\r\n-class MoviesListScreen extends StatelessWidget {\r\n-  final int genreId;\r\n-  final String genreName;\r\n-\r\n-  const MoviesListScreen({super.key, required this.genreId, required this.genreName});\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    return Scaffold(\r\n-      appBar: AppBar(title: Text(genreName)),\r\n-      body: FutureBuilder<List<dynamic>>(\r\n-        future: fetchMoviesByGenre(genreId),\r\n-        builder: (context, snapshot) {\r\n-          if (snapshot.connectionState == ConnectionState.waiting) {\r\n-            return const Center(child: CircularProgressIndicator());\r\n-          } else if (snapshot.hasError) {\r\n-            return Center(child: Text('Error: ${snapshot.error}'));\r\n-          } else if (!snapshot.hasData || snapshot.data!.isEmpty) {\r\n-            return const Center(child: Text('No movies available'));\r\n-          }\r\n-\r\n-          final movies = snapshot.data!;\r\n-          return ListView.builder(\r\n-            itemCount: movies.length,\r\n-            itemBuilder: (context, index) {\r\n-              final movie = movies[index];\r\n-              return ListTile(\r\n-                title: Text(movie['title']),\r\n-                subtitle: Text(movie['release_date'] ?? 'Unknown'),\r\n-                leading: Image.network('https://image.tmdb.org/t/p/w200${movie['poster_path']}'),\r\n-              );\r\n-            },\r\n-          );\r\n-        },\r\n-      ),\r\n-    );\r\n-  }\r\n-}\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1732828028124,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,6 @@\n+import 'package:flutter/material.dart';\r\n+\r\n class MoviesListScreen extends StatelessWidget {\r\n   final int genreId;\r\n   final String genreName;\r\n \r\n"
                },
                {
                    "date": 1732828033187,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n import 'package:flutter/material.dart';\r\n+import 'package:movies_app/api/api.dart';\r\n \r\n class MoviesListScreen extends StatelessWidget {\r\n   final int genreId;\r\n   final String genreName;\r\n"
                },
                {
                    "date": 1732828645587,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,13 @@\n class MoviesListScreen extends StatelessWidget {\r\n   final int genreId;\r\n   final String genreName;\r\n \r\n-  const MoviesListScreen({super.key, required this.genreId, required this.genreName});\r\n+  const MoviesListScreen({\r\n+    super.key,\r\n+    required this.genreId,\r\n+    required this.genreName,\r\n+  });\r\n \r\n   @override\r\n   Widget build(BuildContext context) {\r\n     return Scaffold(\r\n@@ -26,16 +30,31 @@\n           return ListView.builder(\r\n             itemCount: movies.length,\r\n             itemBuilder: (context, index) {\r\n               final movie = movies[index];\r\n+              final posterPath = movie['poster_path'];\r\n+              final releaseDate = movie['release_date'] ?? 'Unknown';\r\n+\r\n               return ListTile(\r\n                 title: Text(movie['title']),\r\n-                subtitle: Text(movie['release_date'] ?? 'Unknown'),\r\n-                leading: Image.network('https://image.tmdb.org/t/p/w200${movie['poster_path']}'),\r\n+                subtitle: Text('Release Date: $releaseDate'),\r\n+                leading: posterPath != null\r\n+                    ? Image.network(\r\n+                        'https://image.tmdb.org/t/p/w200$posterPath',\r\n+                        fit: BoxFit.cover,\r\n\\ No newline at end of file\n+                        width: 50,\r\n+                        height: 75,\r\n+                      )\r\n+                    : Image.asset(\r\n+                        'assets/images/placeholder.png', // Local placeholder image\r\n+                        fit: BoxFit.cover,\r\n+                        width: 50,\r\n+                        height: 75,\r\n+                      ),\r\n               );\r\n             },\r\n           );\r\n         },\r\n       ),\r\n     );\r\n   }\r\n-}\n+}\r\n"
                },
                {
                    "date": 1732828652434,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n                         width: 50,\r\n                         height: 75,\r\n                       )\r\n                     : Image.asset(\r\n-                        'assets/images/placeholder.png', // Local placeholder image\r\n+                        'assets/images/action.png', // Local placeholder image\r\n                         fit: BoxFit.cover,\r\n                         width: 50,\r\n                         height: 75,\r\n                       ),\r\n"
                },
                {
                    "date": 1732828698085,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,16 +36,9 @@\n \r\n               return ListTile(\r\n                 title: Text(movie['title']),\r\n                 subtitle: Text('Release Date: $releaseDate'),\r\n-                leading: posterPath != null\r\n-                    ? Image.network(\r\n-                        'https://image.tmdb.org/t/p/w200$posterPath',\r\n-                        fit: BoxFit.cover,\r\n-                        width: 50,\r\n-                        height: 75,\r\n-                      )\r\n-                    : Image.asset(\r\n+                leading:  Image.asset(\r\n                         'assets/images/action.png', // Local placeholder image\r\n                         fit: BoxFit.cover,\r\n                         width: 50,\r\n                         height: 75,\r\n@@ -56,5 +49,5 @@\n         },\r\n       ),\r\n     );\r\n   }\r\n-}\n\\ No newline at end of file\n+}\r\n"
                },
                {
                    "date": 1732828710976,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,20 +30,20 @@\n           return ListView.builder(\r\n             itemCount: movies.length,\r\n             itemBuilder: (context, index) {\r\n               final movie = movies[index];\r\n-              final posterPath = movie['poster_path'];\r\n+          \r\n               final releaseDate = movie['release_date'] ?? 'Unknown';\r\n \r\n               return ListTile(\r\n                 title: Text(movie['title']),\r\n                 subtitle: Text('Release Date: $releaseDate'),\r\n-                leading:  Image.asset(\r\n-                        'assets/images/action.png', // Local placeholder image\r\n-                        fit: BoxFit.cover,\r\n-                        width: 50,\r\n-                        height: 75,\r\n-                      ),\r\n+                leading: Image.asset(\r\n+                  'assets/images/action.png', // Local placeholder image\r\n+                  fit: BoxFit.cover,\r\n+                  width: 50,\r\n+                  height: 75,\r\n+                ),\r\n               );\r\n             },\r\n           );\r\n         },\r\n"
                },
                {
                    "date": 1732828732801,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,20 +30,27 @@\n           return ListView.builder(\r\n             itemCount: movies.length,\r\n             itemBuilder: (context, index) {\r\n               final movie = movies[index];\r\n-          \r\n+              final posterPath = movie['poster_path'];\r\n               final releaseDate = movie['release_date'] ?? 'Unknown';\r\n \r\n               return ListTile(\r\n                 title: Text(movie['title']),\r\n                 subtitle: Text('Release Date: $releaseDate'),\r\n-                leading: Image.asset(\r\n-                  'assets/images/action.png', // Local placeholder image\r\n-                  fit: BoxFit.cover,\r\n-                  width: 50,\r\n-                  height: 75,\r\n-                ),\r\n+                leading: posterPath != null\r\n+                    ? Image.network(\r\n+                        'https://image.tmdb.org/t/p/w200$posterPath',\r\n+                        fit: BoxFit.cover,\r\n+                        width: 50,\r\n+                        height: 75,\r\n+                      )\r\n+                    : Image.asset(\r\n+                        'assets/images/action.png', // Local placeholder image\r\n+                        fit: BoxFit.cover,\r\n+                        width: 50,\r\n+                        height: 75,\r\n+                      ),\r\n               );\r\n             },\r\n           );\r\n         },\r\n"
                },
                {
                    "date": 1732828738639,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,22 +30,14 @@\n           return ListView.builder(\r\n             itemCount: movies.length,\r\n             itemBuilder: (context, index) {\r\n               final movie = movies[index];\r\n-              final posterPath = movie['poster_path'];\r\n               final releaseDate = movie['release_date'] ?? 'Unknown';\r\n \r\n               return ListTile(\r\n                 title: Text(movie['title']),\r\n                 subtitle: Text('Release Date: $releaseDate'),\r\n-                leading: posterPath != null\r\n-                    ? Image.network(\r\n-                        'https://image.tmdb.org/t/p/w200$posterPath',\r\n-                        fit: BoxFit.cover,\r\n-                        width: 50,\r\n-                        height: 75,\r\n-                      )\r\n-                    : Image.asset(\r\n+                leading:  Image.asset(\r\n                         'assets/images/action.png', // Local placeholder image\r\n                         fit: BoxFit.cover,\r\n                         width: 50,\r\n                         height: 75,\r\n"
                },
                {
                    "date": 1732828872107,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n               final movie = movies[index];\r\n               final releaseDate = movie['release_date'] ?? 'Unknown';\r\n \r\n               return ListTile(\r\n-                title: Text(movie['title']),\r\n+                title: Text(movie['title'],),\r\n                 subtitle: Text('Release Date: $releaseDate'),\r\n                 leading:  Image.asset(\r\n                         'assets/images/action.png', // Local placeholder image\r\n                         fit: BoxFit.cover,\r\n"
                },
                {
                    "date": 1732828882475,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n               final movie = movies[index];\r\n               final releaseDate = movie['release_date'] ?? 'Unknown';\r\n \r\n               return ListTile(\r\n-                title: Text(movie['title'],),\r\n+                title: Text(movie['title'],style: Theme.of(context),),\r\n                 subtitle: Text('Release Date: $releaseDate'),\r\n                 leading:  Image.asset(\r\n                         'assets/images/action.png', // Local placeholder image\r\n                         fit: BoxFit.cover,\r\n"
                },
                {
                    "date": 1732828888249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n               final movie = movies[index];\r\n               final releaseDate = movie['release_date'] ?? 'Unknown';\r\n \r\n               return ListTile(\r\n-                title: Text(movie['title'],style: Theme.of(context),),\r\n+                title: Text(movie['title'],style: Theme.of(context).textTheme.,),\r\n                 subtitle: Text('Release Date: $releaseDate'),\r\n                 leading:  Image.asset(\r\n                         'assets/images/action.png', // Local placeholder image\r\n                         fit: BoxFit.cover,\r\n"
                },
                {
                    "date": 1732828916834,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,11 @@\n               final movie = movies[index];\r\n               final releaseDate = movie['release_date'] ?? 'Unknown';\r\n \r\n               return ListTile(\r\n-                title: Text(movie['title'],style: Theme.of(context).textTheme.,),\r\n+                title: Text(movie['title'],style: Theme.of(context).textTheme.bodyMedium?.copyWith(\r\n+                            color: AppTheme.white,\r\n+                          ),),\r\n                 subtitle: Text('Release Date: $releaseDate'),\r\n                 leading:  Image.asset(\r\n                         'assets/images/action.png', // Local placeholder image\r\n                         fit: BoxFit.cover,\r\n"
                },
                {
                    "date": 1732828922788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import 'package:flutter/material.dart';\r\n import 'package:movies_app/api/api.dart';\r\n+import 'package:movies_app/app_theme.dart';\r\n \r\n class MoviesListScreen extends StatelessWidget {\r\n   final int genreId;\r\n   final String genreName;\r\n"
                },
                {
                    "date": 1732828962829,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,11 @@\n                   style: Theme.of(context).textTheme.bodyMedium?.copyWith(\r\n                         color: AppTheme.white,\r\n                       ),\r\n                 ),\r\n-                subtitle: Text('Release Date: $releaseDate'),\r\n+                subtitle: Text('Release Date: $releaseDate',style: Theme.of(context).textTheme.labelLarge?.copyWith(\r\n+                            color: AppTheme.white.withOpacity(0.67),\r\n+                          ),),\r\n                 leading: Image.asset(\r\n                   'assets/images/action.png', // Local placeholder image\r\n                   fit: BoxFit.cover,\r\n                   width: 50,\r\n"
                },
                {
                    "date": 1732828998669,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n       appBar: AppBar(\r\n         title: Text(\r\n           genreName,\r\n           style: Theme.of(context).textTheme.labelLarge?.copyWith(\r\n-                color: AppTheme.white.withOpacity(0.67),\r\n+                color: AppTheme.white,\r\n               ),\r\n         ),\r\n       ),\r\n       body: FutureBuilder<List<dynamic>>(\r\n"
                }
            ],
            "date": 1732827960399,
            "name": "Commit-0",
            "content": "class MoviesListScreen extends StatelessWidget {\r\n  final int genreId;\r\n  final String genreName;\r\n\r\n  const MoviesListScreen({super.key, required this.genreId, required this.genreName});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      appBar: AppBar(title: Text(genreName)),\r\n      body: FutureBuilder<List<dynamic>>(\r\n        future: fetchMoviesByGenre(genreId),\r\n        builder: (context, snapshot) {\r\n          if (snapshot.connectionState == ConnectionState.waiting) {\r\n            return const Center(child: CircularProgressIndicator());\r\n          } else if (snapshot.hasError) {\r\n            return Center(child: Text('Error: ${snapshot.error}'));\r\n          } else if (!snapshot.hasData || snapshot.data!.isEmpty) {\r\n            return const Center(child: Text('No movies available'));\r\n          }\r\n\r\n          final movies = snapshot.data!;\r\n          return ListView.builder(\r\n            itemCount: movies.length,\r\n            itemBuilder: (context, index) {\r\n              final movie = movies[index];\r\n              return ListTile(\r\n                title: Text(movie['title']),\r\n                subtitle: Text(movie['release_date'] ?? 'Unknown'),\r\n                leading: Image.network('https://image.tmdb.org/t/p/w200${movie['poster_path']}'),\r\n              );\r\n            },\r\n          );\r\n        },\r\n      ),\r\n    );\r\n  }\r\n}\r\nclass MoviesListScreen extends StatelessWidget {\r\n  final int genreId;\r\n  final String genreName;\r\n\r\n  const MoviesListScreen({super.key, required this.genreId, required this.genreName});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      appBar: AppBar(title: Text(genreName)),\r\n      body: FutureBuilder<List<dynamic>>(\r\n        future: fetchMoviesByGenre(genreId),\r\n        builder: (context, snapshot) {\r\n          if (snapshot.connectionState == ConnectionState.waiting) {\r\n            return const Center(child: CircularProgressIndicator());\r\n          } else if (snapshot.hasError) {\r\n            return Center(child: Text('Error: ${snapshot.error}'));\r\n          } else if (!snapshot.hasData || snapshot.data!.isEmpty) {\r\n            return const Center(child: Text('No movies available'));\r\n          }\r\n\r\n          final movies = snapshot.data!;\r\n          return ListView.builder(\r\n            itemCount: movies.length,\r\n            itemBuilder: (context, index) {\r\n              final movie = movies[index];\r\n              return ListTile(\r\n                title: Text(movie['title']),\r\n                subtitle: Text(movie['release_date'] ?? 'Unknown'),\r\n                leading: Image.network('https://image.tmdb.org/t/p/w200${movie['poster_path']}'),\r\n              );\r\n            },\r\n          );\r\n        },\r\n      ),\r\n    );\r\n  }\r\n}\r\nclass MoviesListScreen extends StatelessWidget {\r\n  final int genreId;\r\n  final String genreName;\r\n\r\n  const MoviesListScreen({super.key, required this.genreId, required this.genreName});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      appBar: AppBar(title: Text(genreName)),\r\n      body: FutureBuilder<List<dynamic>>(\r\n        future: fetchMoviesByGenre(genreId),\r\n        builder: (context, snapshot) {\r\n          if (snapshot.connectionState == ConnectionState.waiting) {\r\n            return const Center(child: CircularProgressIndicator());\r\n          } else if (snapshot.hasError) {\r\n            return Center(child: Text('Error: ${snapshot.error}'));\r\n          } else if (!snapshot.hasData || snapshot.data!.isEmpty) {\r\n            return const Center(child: Text('No movies available'));\r\n          }\r\n\r\n          final movies = snapshot.data!;\r\n          return ListView.builder(\r\n            itemCount: movies.length,\r\n            itemBuilder: (context, index) {\r\n              final movie = movies[index];\r\n              return ListTile(\r\n                title: Text(movie['title']),\r\n                subtitle: Text(movie['release_date'] ?? 'Unknown'),\r\n                leading: Image.network('https://image.tmdb.org/t/p/w200${movie['poster_path']}'),\r\n              );\r\n            },\r\n          );\r\n        },\r\n      ),\r\n    );\r\n  }\r\n}\r\n"
        }
    ]
}